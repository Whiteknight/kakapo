## arguments we want to run parrot with
PARROT_ARGS   :=

## configuration settings
VERSION       := @versiondir@
BIN_DIR       := @bindir@
LIB_DIR       := @libdir@$(VERSION)
DOC_DIR       := @docdir@$(VERSION)
MANDIR        := @mandir@$(VERSION)


## Setup some commands
MAKE          := @make_c@
PERL          := @perl@
CAT           := @cat@
CHMOD         := @chmod@
CP            := @cp@
LINK          := $(BIN_DIR)/pbc_merge@exe@
MKPATH        := @mkpath@
RM_F          := @rm_f@
RM_RF         := @rm_rf@
POD2MAN       := pod2man
#IF(parrot_is_shared and not(cygwin or win32)):export LD_RUN_PATH := @blib_dir@:$(LD_RUN_PATH)
PARROT        := $(BIN_DIR)/parrot@exe@
PARROT_NQP	:= $(BIN_DIR)/parrot_nqp@exe@
PBC_TO_EXE    := $(BIN_DIR)/pbc_to_exe@exe@
#IF(darwin):
#IF(darwin):# MACOSX_DEPLOYMENT_TARGET must be defined for OS X compilation/linking
#IF(darwin):export MACOSX_DEPLOYMENT_TARGET := @osx_version@

COMPILE_pg	:= $(PARROT) $(PARROT_ARGS) $(PERL6GRAMMAR)
COMPILE_nqp	:= $(PARROT_NQP)
COMPILE_pir	:= $(PARROT) $(PARROT_ARGS)
STRIP_PIRA	:= grep -v '^.annotate'

ALL_TESTS =		\
	test-array		\
	test-attributes	\
	test-global		\
	test-parrot		\
	test-program	\
	test-rpa		\
	test-rsa

BASE_LIB_PIRS = 		\
	src/Classes/Class.pir	\
	src/Classes/ArrayBased.pir	\
	src/Classes/BaseBehavior.pir \
	src/Classes/HashBased.pir	\
	src/Classes/P6object.pir	\
	src/ConfigFile.pir		\
	src/DependencyQueue.pir \
	src/Dumper.pir		\
	src/Global.pir		\
	src/Kakapo.pir		\
	src/LimitedPair.pir 		\
	src/Parrot.pir 		\
	src/Parrot/Opcode.pir 	\
	src/Pir.pir 			\
	src/Pmc/Array.pir		\
	src/Pmc/Config.pir		\
	src/Pmc/File.pir		\
	src/Pmc/Hash.pir		\
	src/Pmc/Namespace.pir	\
	src/Pmc/OS.pir		\
	src/Pmc/ResizablePMCArray.pir \
	src/Pmc/ResizableStringArray.pir \
	src/Pmc/String.pir	\
	src/Pmc/Undef.pir	\
	src/Program.pir

GENERATED_FILES =		\
	$(BASE_LIB_PIRS)	\
	$(TEST_LIB_PIRS)	\
	library/kakapo_base.pir	\
	library/kakapo_test.pir	\
	$(LIBRARY_PBCS)

KRT0 = \
	library/krt0.pbc
	
LIBRARY_PBCS =			\
	library/kakapo_base.pbc	\
	library/kakapo_test.pbc		\
	$(KRT0)
	
TEST_LIB_PIRS =			\
	src/Test/Testcase.pir		\
	src/Matchers/AllOf.pir		\
	src/Matchers/AnyOne.pir	\
	src/Matchers/Boolean.pir	\
	src/Matchers/Defined.pir	\
	src/Matchers/DescribedAs.pir	\
	src/Matchers/Elements.pir	\
	src/Matchers/Empty.pir		\
	src/Matchers/Equals.pir		\
	src/Matchers/EqualsArray.pir	\
	src/Matchers/EqualsFloat.pir	\
	src/Matchers/Factory.pir	\
	src/Matchers/InstanceOf.pir	\
	src/Matchers/Matcher.pir	\
	src/Matchers/Not.pir		\
	src/Matchers/TypeSafe.pir
	
	# src/Matchers/IdenticalTo.pir	\
	
	# src/Matchers/Null.pir		\
	# src/Matchers/True.pir		\

#######################################################################
##### Implicit rules here 
#######################################################################

# NOTE: Using "old sk00l" implicit rules here because Microsoft's Nmake supports those.
.SUFFIXES: 
.SUFFIXES: .pg .nqp .pira .pir .pbc .pbx
.PRECIOUS: .pir

.pg.pira:
	@echo "*** Compiling to PIRA: $<"
	$(COMPILE_pg) --output=$@ $<

.nqp.pira: 
	@echo "*** Compiling to PIRA: $<"
	$(COMPILE_nqp) --target=pir --output=$@  $<

.pira.pir:
	@echo "*** Strip annotations PIRA->PIR: $<"
	$(STRIP_PIRA) $< > $@

.pir.pbc:
	@echo "*** Compiling to PBC: $<"
	$(COMPILE_pir) --output=$@ $<
	
#######################################################################
##### Targets start here (asciibetical order)
#######################################################################

ALL: all

Makefile: build/Makefile.in
	$(PERL) Configure.pl

all: build

build:	kakapo.cfg $(LIBRARY_PBCS)
	@echo "Build complete"

CHANGES:	src/package.nqp
	$(CP) src/package.nqp $@

clean:
	$(RM_F) $(GENERATED_FILES)

distclean: realclean

# This is a listing of all targets, that are meant to be called by users
help:
	@echo ""
	@echo "The following targets are available for the user:"
	@echo ""
	@echo "  all:               build (This is the default target.)"
	@echo "  build:             kakapo.cfg library/kakapo_*.pbc"
	@echo ""
	@echo "Testing:"
	@echo "  test:              Run the test suite."
	@echo "  testclean:         Clean up test results."
	@echo ""
	@echo "Cleaning:"
	@echo "  clean:             Basic cleanup."
	@echo "  realclean:         Also removes files generated by 'Configure.pl'"
	@echo "  distclean:         Also removes also anything built, in theory"
	@echo ""
	@echo "Misc:"
	@echo "  help:              Print this help message."
	@echo ""

kakapo.cfg:
#IF(win32):	IF NOT EXIST kakapo.cfg $(CP) kakapo_cfg.tmpl kakapo.cfg
#IF(not(win32)):	if [ ! -f kakapo.cfg ]; then $(CP) kakapo_cfg.tmpl kakapo.cfg ; fi

library/kakapo_base.pir: $(BASE_LIB_PIRS) src/kakapo_top.pir src/kakapo_bottom.pir Makefile
	cat src/kakapo_top.pir $(BASE_LIB_PIRS) src/kakapo_bottom.pir > $@

library/kakapo_test.pir: $(BASE_LIB_PIRS) $(TEST_LIB_PIRS) src/kakapo_top.pir src/kakapo_bottom.pir Makefile
	cat src/kakapo_top.pir $(BASE_LIB_PIRS) $(TEST_LIB_PIRS) src/kakapo_bottom.pir > $@

library/krt0.pir: src/krt0_pir.tmpl
	$(CP) src/krt0_pir.tmpl $@

install:
	# install kakapo_base
	$(CP) library/kakapo_base.pbc $(LIB_DIR)/library/kakapo_base.pbc
	$(CHMOD) 0444 $(LIB_DIR)/library/kakapo_base.pbc
	# install kakapo_test
	$(CP) library/kakapo_test.pbc $(LIB_DIR)/library/kakapo_test.pbc
	$(CHMOD) 0444 $(LIB_DIR)/library/kakapo_test.pbc
	# install krt0
	$(CP) library/krt0.pbc $(LIB_DIR)/library/krt0.pbc
	$(CHMOD) 0444 $(LIB_DIR)/library/krt0.pbc
	# install docs
	-$(MKPATH) $(DOC_DIR)/kakapo
	$(CP) $(DOC_FILES) $(DOC_DIR)/kakapo

realclean: clean
	$(RM_F) Makefile

release: build
	-$(MKPATH) released
	$(CP) library/kakapo_base.pir released/kakapo_base.pir
	$(CP) library/kakapo_test.pir released/kakapo_test.pir
	$(CP) library/krt0.pir released/krt0.pir
	
src/kakapo_bottom.pir: src/kakapo_bottom_pir.tmpl
	$(CP) src/kakapo_bottom_pir.tmpl $@
	
src/kakapo_top.pir: src/kakapo_top_pir.tmpl
	$(CP) src/kakapo_top_pir.tmpl $@

test: build $(ALL_TESTS)
	$(PARROT) $(PARROT_FLAGS) t/Parrot.pir

#----------------------------------------------------------------------
# Individual test-foo targets 
#----------------------------------------------------------------------

test-array: build t/Pmc/test-array.pbc
	$(PARROT) $(PARROT_FLAGS) -Llibrary t/Pmc/test-array.pbc

test-global: build t/Global.pir
	$(PARROT) $(PARROT_FLAGS) t/Global.pir

test-parrot: build t/Parrot.pir
	$(PARROT) $(PARROT_FLAGS) t/Parrot.pir

test-program: build t/Program.pir
	$(PARROT) $(PARROT_FLAGS) t/Program.pir

test-rpa: build t/Pmc/test-rpa.pbc
	$(PARROT) $(PARROT_FLAGS) -Llibrary t/Pmc/test-rpa.pbc

test-rsa: build $(KRT0) t/Pmc/test-rsa.pbc
	$(PARROT) $(PARROT_FLAGS) -Llibrary t/Pmc/test-rsa.pbc

test-undef: build t/Pmc/test-undef.pbc
	$(PARROT) $(PARROT_FLAGS) -Llibrary t/Pmc/test-undef.pbc

test-attributes: build t/Classes/test-Attributes.pbc
	$(PARROT) $(PARROT_FLAGS) -Llibrary t/Classes/test-Attributes.pbc

#----------------------------------------------------------------------
# Compile rules that support the test-foo targets, above.
#----------------------------------------------------------------------

t/Classes/test-Attributes.pbc: $(KRT0) t/Classes/Attributes.pbc
	$(LINK) --output=$@ $(KRT0) t/Classes/Attributes.pbc
	
t/Pmc/test-array.pbc: $(KRT0) t/Pmc/Array.pbc
	$(LINK) --output=$@ $(KRT0) t/Pmc/Array.pbc

t/Pmc/test-rpa.pbc: $(KRT0) t/Pmc/ResizablePMCArray.pbc
	$(LINK) --output=$@ $(KRT0) t/Pmc/ResizablePMCArray.pbc

t/Pmc/test-rsa.pbc: $(KRT0) t/Pmc/ResizableStringArray.pbc	
	$(LINK) --output=$@ $(KRT0) t/Pmc/ResizableStringArray.pbc

t/Pmc/test-undef.pbc: $(KRT0)  t/Pmc/Undef.pbc
	$(LINK) --output=$@ $(KRT0) t/Pmc/Undef.pbc

testclean:
	$(RM_F) $(TEST_CLEANUPS)

uninstall:
	$(RM_F) $(LIB_DIR)/library/kakapo_base.pbc
	$(RM_F) $(LIB_DIR)/library/kakapo_test.pbc
	$(RM_RF) $(DOC_DIR)/kakapo
